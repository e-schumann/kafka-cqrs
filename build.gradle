import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.1.1.RELEASE'
        classpath 'com.bmuschko:gradle-docker-plugin:4.2.0'
    }
}

allprojects {
    group 'pl.jojczykp.cqrs'
}

subprojects {
    repositories {
        mavenLocal() //TODO Cassandra 4 - Remove
        mavenCentral()
        jcenter()
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
    }

    apply plugin: 'base'

    clean {
        doLast {
            delete "${buildDir}/../target/"
        }
    }
}

configure(services()) {
    apply plugin: 'com.bmuschko.docker-remote-api'

    task createDockerImage(type: DockerBuildImage, dependsOn: 'build') {
        description = 'Creates docker image with name and tag corresponding to project, parent and version.'

        inputDir.set(file('.'))
        tags.add(formatImageId(project))
    }

    task removeDockerImage(type: DockerRemoveImage) {
        description = 'Removes docker image with name and tag corresponding to project, parent and version.'

        imageId = formatImageId(project)

        onError {
            println 'No previous image to delete'
        }
    }

    clean.dependsOn += removeDockerImage.name
}

def services() {
    subprojects.findAll { it.name.endsWith('-service') }
}

def static formatImageId(Project project) {
    "jojczykp.pl/${project.parent.name}/${project.name}:${ -> project.version}"
}
